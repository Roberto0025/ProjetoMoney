unit cCategoria;

interface

uses FireDAC.Comp.Client, FireDAC.DApt, System.SysUtils, FMX.Graphics;

type
  TCategoria = class

  private
    Fconn: TFDConnection;
    FID_CATEGORIA: Integer;
    FDESCRICAO: string;
    FICONE: TBitMap;
    FINDICE_ICONE: Integer;

  public
    constructor Create(conn: TFDConnection);
    property ID_CATEGORIA: Integer read FID_CATEGORIA write FID_CATEGORIA;
    property DESCRICAO: string read FDESCRICAO write FDESCRICAO;
    property ICONE: TBitMap read FICONE write FICONE;
    property INDICE_ICONE: Integer read FINDICE_ICONE write FINDICE_ICONE;

    function ListarCategoria(out erro: string): TFDQuery;
    function Inserir(out erro: string): Boolean;
    function Alterar(out erro: string): Boolean;
    function Excluir(out erro: string): Boolean;
  end;

implementation

{ TCategoria }

constructor TCategoria.Create(conn: TFDConnection);
begin
  Fconn := conn;
end;

function TCategoria.Inserir(out erro: string): Boolean;
var
  qry: TFDQuery;

begin
  // Validações
  if DESCRICAO = '' then
  begin
    erro := 'Informe a descrição da categoria';
    Result := false;
    exit;
  end;

  try
    try
      qry := TFDQuery.Create(nil);
      qry.Connection := Fconn;

      with qry do
      begin
        Active := false;
        sql.Clear;
        sql.Add('INSERT INTO TAB_CATEGORIA(DESCRICAO, ICONE, INDICE_ICONE)');
        sql.Add('VALUES(:DESCRICAO, :ICONE, :INDICE_ICONE)');
        ParamByName('DESCRICAO').Value := DESCRICAO;
        ParamByName('ICONE').Assign(ICONE);
        ParamByName('INDICE_ICONE').Value := INDICE_ICONE;
        ExecSQL;
      end;

      Result := true;
      erro := '';

    except
      on ex: exception do
      begin
        Result := false;
        erro := 'Erro ao inserir categoria: ' + ex.Message;
      end;
    end;

  finally
    qry.DisposeOf;
  end;
end;

function TCategoria.Alterar(out erro: string): Boolean;
var
  qry: TFDQuery;

begin
  // Validacoes...
  if ID_CATEGORIA <= 0 then
  begin
    erro := 'Informe o ID da categoria';
    Result := false;
    exit;
  end;

  if DESCRICAO = '' then
  begin
    erro := 'Informe a descrição da categoria';
    Result := false;
    exit;
  end;

  try
    try
      qry := TFDQuery.Create(nil);
      qry.Connection := Fconn;

      with qry do
      begin
        Active := false;
        sql.Clear;
        sql.Add('UPDATE TAB_CATEGORIA SET DESCRICAO=:DESCRICAO, ICONE=:ICONE, INDICE_ICONE=:INDICE_ICONE');
        sql.Add('WHERE ID_CATEGORIA = :ID_CATEGORIA');
        ParamByName('DESCRICAO').Value := DESCRICAO;
        ParamByName('ICONE').Assign(ICONE);
        ParamByName('ID_CATEGORIA').Value := ID_CATEGORIA;
        ParamByName('INDICE_ICONE').Value := INDICE_ICONE;
        ExecSQL;
      end;

      Result := true;
      erro := '';

    except
      on ex: exception do
      begin
        Result := false;
        erro := 'Erro ao alterar categoria: ' + ex.Message;
      end;
    end;

  finally
    qry.DisposeOf;
  end;
end;

function TCategoria.Excluir(out erro: string): Boolean;
var
  qry: TFDQuery;

begin
  // Validações
  if ID_CATEGORIA <= 0 then
  begin
    erro := 'Informe o id da categoria';
    Result := false;
    exit;
  end;

  try
    try
      qry := TFDQuery.Create(nil);
      qry.Connection := Fconn;

      with qry do
      begin
        //VERIFICAR SE CATEGORIA POSSUI LANÇAMENTO ANTES DE EXLUIR
        Active := false;
        sql.Clear;
        sql.Add('SELECT * FROM TAB_LANCAMENTO');
        sql.Add('WHERE ID_CATEGORIA = :ID_CATEGORIA');
        ParamByName('ID_CATEGORIA').Value := ID_CATEGORIA;
        Active := True;

        if RecordCount > 0 then
        begin
          Result := False;
          erro := 'A categoria contém lançamento e não pode ser excluída!';
          Exit;
        end;

        Active := false;
        sql.Clear;
        sql.Add('DELETE FROM TAB_CATEGORIA');
        sql.Add('WHERE ID_CATEGORIA = :ID_CATEGORIA');
        ParamByName('ID_CATEGORIA').Value := ID_CATEGORIA;
        ExecSQL;
      end;

      Result := true;
      erro := '';

    except
      on ex: exception do
      begin
        Result := false;
        erro := 'Erro ao excluir categoria: ' + ex.Message;
      end;
    end;

  finally
    qry.DisposeOf;
  end;
end;

function TCategoria.ListarCategoria(out erro: string): TFDQuery;
var
  qry: TFDQuery;

begin
  try
    qry := TFDQuery.Create(nil);
    qry.Connection := Fconn;

    with qry do
    begin
      Active := false;
      sql.Clear;
      sql.Add('SELECT * from TAB_CATEGORIA');
      sql.Add('WHERE 1 = 1');

      if ID_CATEGORIA > 0 then
      begin
        sql.Add('AND ID_CATEGORIA = :ID_CATEGORIA');
        ParamByName('ID_CATEGORIA').Value := ID_CATEGORIA;
      end;

      sql.Add('ORDER BY DESCRICAO');

      { if DESCRICAO <> '' then
        begin
        sql.Add('AND DESCRICAO = :DESCRICAO');
        ParamByName('DESCRICAO').Value := DESCRICAO;
        end; }
      Active := true;
    end;

    Result := qry;
    erro := '';

  except
    on ex: exception do
    begin
      Result := nil;
      erro := 'Erro ao consultar categoria: ' + ex.Message;
    end;
  end;
end;

end.
